{"version":3,"sources":["serviceWorker.js","reducers/quote.js","constants/index.js","reducers/hasError.js","reducers/nextId.js","reducers/index.js","reducers/cancel.js","store.js","components/QuoteBox/RedirectToRandomQuote.js","components/QuoteBox/Quote.js","components/QuoteBox/NewQuoteButton.js","components/TweetButton.js","hooks/useFetchQuote.js","actions/index.js","components/Error.js","components/QuoteBox/QuoteBox.js","components/QuoteBox/RouteToQuoteBox.js","components/QuoteBox/index.js","components/App.js","components/Root.js","index.js"],"names":["Boolean","window","location","hostname","match","quote","state","action","type","hasError","getRandomQuoteId","Math","floor","random","combineReducers","nextId","cancel","createMyStore","createStore","reducer","applyMiddleware","thunk","RedirectToRandomQuote","quoteId","useSelector","to","skeletonParagraph","flatMap","w","i","key","width","SkeletonText","Quote","text","author","id","NewQuoteButton","TweetButton","props","attributes","tweet","children","otherProps","rel","target","href","encodeURIComponent","style","pointerEvents","cursor","dispatch","useDispatch","useEffect","index","controller","AbortController","signal","abort","fetch","process","then","response","json","catch","Error","className","icon","faExclamationTriangle","color","size","QuoteBox","useFetchQuote","document","title","label","RouteToQuoteBox","path","render","params","parseInt","component","QuoteBoxWrapper","App","useFccTest","fccTest","FccTests","random_quote_machine","queryParam","Root","store","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2c15e56c.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import { RECIEVE_QUOTE, FETCHING_QUOTE, RECEIVE_ERROR } from '../constants';\n\nconst quote = (state = {}, action) => {\n    switch (action.type) {\n    case RECIEVE_QUOTE:\n        return { ...action.quote };\n    case FETCHING_QUOTE:\n    case RECEIVE_ERROR:\n        return {};\n    default:\n        return state;\n    }\n};\n\nexport default quote;","export const FETCHING_QUOTE = 'FETCHING_QUOTE';\nexport const RECIEVE_QUOTE = 'RECEIVE_QUOTE';\nexport const RECEIVE_ERROR = 'RECEIVE_ERROR';\nexport const NUMBER_QUOTES = 1497;","import { FETCHING_QUOTE, RECIEVE_QUOTE, RECEIVE_ERROR } from '../constants';\n\nconst hasError = (state = false, action) => {\n    switch (action.type) {\n    case RECEIVE_ERROR:\n        return true;\n    case FETCHING_QUOTE:\n    case RECIEVE_QUOTE:\n        return false;\n    default:\n        return state;\n    }\n};\n\nexport default hasError;","import { FETCHING_QUOTE, NUMBER_QUOTES } from '../constants';\n\nconst getRandomQuoteId = () => Math.floor(Math.random() * (NUMBER_QUOTES + 1));\n\nexport default (state = getRandomQuoteId(), action) => {\n    switch (action.type) {\n    case FETCHING_QUOTE:\n        return getRandomQuoteId();\n    default:\n        return state;\n    }\n};","import { combineReducers } from 'redux';\nimport quote from './quote';\nimport hasError from './hasError';\nimport nextId from './nextId';\nimport cancel from './cancel';\n\nexport default combineReducers({\n    quote,\n    hasError,\n    nextId,\n    cancel\n});","import { FETCHING_QUOTE, RECIEVE_QUOTE, RECEIVE_ERROR } from '../constants';\n\nexport default (state = null, action) => {\n    switch (action.type) {\n    case FETCHING_QUOTE:\n        if (state != null) state();\n        return action.cancel;\n    case RECIEVE_QUOTE:\n    case RECEIVE_ERROR:\n        return null;\n    default:\n        return state;\n    }\n};","import { createStore, applyMiddleware } from 'redux';\nimport reducer from './reducers/index';\nimport thunk from 'redux-thunk';\n\nexport const createMyStore = () => createStore(reducer, applyMiddleware(thunk));\n\nexport default createMyStore();","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\n\nconst RedirectToRandomQuote = () => {\n    const quoteId = useSelector(state => state.nextId);\n    \n    return (\n        <Redirect to={`/${quoteId}`} />\n    );\n};\n\nexport default RedirectToRandomQuote;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Skeleton from 'react-loading-skeleton';\n\nconst wordLengths = [3, 2, 8, 4, 8, 4, 3, 1, 4, 7, 1, 6, 6, 5, 4, 6, 9, 2, 3, 7, 4, 2, 7, 3, 3, 4, 4, 6, 2, 1, 5, 2, 5, 8, 3, 6, 9, 4, 3, 1, 6, 2, 9, 8, 11, 6];\nconst skeletonParagraph = wordLengths.flatMap((w, i) => [<Skeleton key={i} width={w * 9} />, ' ']);\nconst SkeletonText = () => (\n    <span>{skeletonParagraph}</span>\n);\n\nconst Quote = ({ text, author }) => {\n    return (\n        <div id=\"quote\">\n            <p id=\"text\">{text || <SkeletonText />}</p>\n            <p id=\"author\">{author || <Skeleton width={200}/>}</p>\n        </div>\n    );\n};\n\nQuote.propTypes = {\n    text: PropTypes.string,\n    author: PropTypes.string\n};\n\nexport default Quote;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\n\nconst NewQuoteButton = ({ nextId }) => {\n\n    return (\n        <Link id=\"new-quote\" to={`/${nextId}`}>New Quote</Link>\n    );\n};\n\nNewQuoteButton.propTypes = {\n    nextId: PropTypes.number.isRequired\n};\n\nexport default NewQuoteButton;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst TweetButton = (props) => {\n    const { tweet, children = 'Tweet', ...otherProps } = props;\n    const enabled = !!(tweet);\n    \n    let attributes;\n    if (enabled)\n        attributes = {\n            rel: 'noopener noreferrer',\n            target: '_blank',\n            href: `https://twitter.com/intent/tweet?text=${encodeURIComponent(tweet)}`\n        };\n    else\n        attributes = {\n            style: { pointerEvents: 'none', cursor: 'default' },\n            href: '#'\n        };\n\n    return (\n        <a {...otherProps} {...attributes}>{children}</a>\n    );\n};\n\nTweetButton.propTypes = {\n    tweet: PropTypes.string,\n    children: PropTypes.any\n};\n\nexport default TweetButton;","import { retrieveQuote } from '../actions';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useEffect } from 'react';\n\nexport default (id) => {\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        dispatch(retrieveQuote(id));\n    }, [dispatch, id]);\n\n    const { nextId, hasError, quote: { text, author } } = useSelector(state => state);\n\n    return { text, author, hasError, nextId };\n};","import { FETCHING_QUOTE, RECIEVE_QUOTE, RECEIVE_ERROR } from '../constants';\n\nexport const receiveQuote = (quote) => ({\n    type: RECIEVE_QUOTE,\n    quote: {\n        author: quote.author,\n        text: quote.quote\n    }\n});\n\nexport const retrieveQuote = (index) => dispatch => {\n    const controller = new AbortController();\n    const signal = controller.signal;\n\n    dispatch({\n        type: FETCHING_QUOTE,\n        cancel: () => { controller.abort(); }\n    });\n\n    fetch(`${process.env.PUBLIC_URL}/quotes/` + index + '.json', { signal })\n        .then(response => response.json())\n        .then(json => {\n            dispatch({\n                type: RECIEVE_QUOTE,\n                quote: {\n                    author: json.author,\n                    text: json.quote\n                }\n            });\n        })\n        .catch(() => dispatch({ type: RECEIVE_ERROR }));\n};","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faExclamationTriangle } from '@fortawesome/free-solid-svg-icons';\n\nconst Error = () => {\n    return <div className=\"error\"><FontAwesomeIcon icon={faExclamationTriangle} color=\"red\" size=\"2x\" /></div>;\n};\n\nexport default Error;","import React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport Quote from './Quote';\nimport NewQuoteButton from './NewQuoteButton';\nimport TweetButton from '../TweetButton';\nimport useFetchQuote from '../../hooks/useFetchQuote';\nimport Error from '../Error';\n\nconst QuoteBox = ({ id }) => {\n    const { text, author, hasError, nextId } = useFetchQuote(id);\n    const tweet = (text && author) ? `${text} - ${author}` : null;\n\n    useEffect(() => {\n        document.title = `Quote #${id}`;\n    }, [id]);\n\n    return (\n        <div id=\"quote-box\">\n            {!hasError && <Quote text={text} author={author} />}\n            {hasError && <Error/> }           \n            <footer>\n                <NewQuoteButton nextId={nextId} />\n                <TweetButton id=\"tweet-quote\" tweet={tweet} label='Tweet Quote' />\n            </footer>\n        </div>\n    );\n};\n\nQuoteBox.propTypes = {\n    id: PropTypes.number.isRequired\n};\n\nexport default QuoteBox;","import React from 'react';\nimport { HashRouter as Router, Switch, Route } from 'react-router-dom';\nimport RedirectToRandomQuote from './RedirectToRandomQuote';\nimport QuoteBox from './QuoteBox';\n\nconst RouteToQuoteBox = () => (\n    <Router>\n        <Switch>\n            <Route path=\"/:id([0-9]+)\" render={({ match: { params: { id } } }) => <QuoteBox id={parseInt(id)} />} />\n            <Route component={RedirectToRandomQuote} />\n        </Switch>\n    </Router>\n);\n\nexport default RouteToQuoteBox;\n","import React from 'react';\nimport RouteToQuoteBox from './RouteToQuoteBox';\n\nconst QuoteBoxWrapper = () => (\n    <RouteToQuoteBox/>\n);\n\nexport default QuoteBoxWrapper;","import '../sass/App.scss';\nimport React from 'react';\nimport QuoteBox from './QuoteBox';\nimport { useFccTest, FccTests } from '@asteffey/react-fcc-test';\n\nconst App = () => {\n    useFccTest({\n        fccTest: FccTests.random_quote_machine,\n        queryParam: 'fcc-test'\n    });\n\n    return (\n        <main>\n            <QuoteBox />\n        </main>\n    );\n};\n\nexport default App;","import React from 'react';\nimport store from '../store';\nimport { Provider } from 'react-redux';\nimport App from './App';\n\nconst Root = () => (\n    <Provider store={store}>\n        <App />\n    </Provider>\n);\n\nexport default Root;\n","import React from 'react';\nimport { render } from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport Root from './components/Root';\n\nrender(\n    <Root />,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}